import type { Request } from 'bun';
import { z } from 'zod';
import { pb } from '@/lib/db';
import { fetchPdfText } from '@/lib/pdf';
import { cerebras } from '@/lib/ai';
import { config } from '../../lib/config.server';

/**
 * GET /api/summary?id=<assignmentId>
 * Returns a title and summary generated by the AI for the specified assignment.
 */
export async function getSummary(req: Request): Promise<Response> {
    try {
        // Validate query param
        const params = Object.fromEntries(new URL(req.url).searchParams.entries());
        const { id } = z.object({ id: z.string().nonempty() }).parse(params);

        // Fetch assignment record
        const assignment = await pb.collection('assignments').getOne(id);
        const fileName = assignment.file as string;
        const fileUrl = `${config.pocketbaseUrl}/api/files/assignments/${id}/${fileName}`;

        // Extract text from PDF
        const pdfText = await fetchPdfText(fileUrl);

        // AI completion for title and summary
        const completion = await cerebras.chat.completions.create({
            model: 'llama3.1-8b',
            messages: [
                { role: 'system', content: 'You are an assignment name generator. Given the text from an assignment, respond with a description name for it and a short summary of it and nothing else. Respond with the name of the assignment on one line, followed by the summary of it on the next.' },
                { role: 'user', content: pdfText.slice(0, 1000) }
            ],
            max_tokens: 300,
        });

        // Parse AI response
        const raw = (completion.choices[0]?.message?.content?.trim() || '').split('\n');
        const title = raw[0] || '';
        const summary = raw[raw.length - 1] || '';

        return new Response(JSON.stringify({ title, summary }), {
            headers: { 'Content-Type': 'application/json' },
        });
    } catch (err: any) {
        console.error('getSummary error:', err);
        if (err instanceof z.ZodError) {
            return new Response(JSON.stringify({ error: 'Invalid or missing parameter: id' }), { status: 400 });
        }
        return new Response(JSON.stringify({ error: err.message || 'Internal server error' }), { status: 500 });
    }
}